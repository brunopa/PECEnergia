                /*.WithMany(p => p.ProprietarioContatoComercial)
                .HasForeignKey(d => d.ContatoComercialId)
                .HasConstraintName("contatoComercialId");*/

                entity.HasOne(d => d.contatoResidencial);
                /*.WithMany(p => p.ProprietarioContatoResidencial)
                .HasForeignKey(d => d.ContatoResidencialId)
                .HasConstraintName("contatoResidencialId");*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using backend.DbModel;
using Microsoft.AspNetCore.Cors;

namespace backend.Controllers
{
    [Produces("application/json")]
    [Route("api/Creditos")]
    [EnableCors("MyPolicy")]
    public class CreditosController : Controller
    {
        private readonly ExpomusContext _context;

        public CreditosController(/*ExpomusContext context*/)
        {
            _context = new ExpomusContext();
        }

        // GET: Creditos
        [HttpGet]
        public IActionResult Index(String descricao)
        {
            var list = from p in _context.Credito
                       where p.descricao.StartsWith(descricao)
                       select new
                       {
                           p.id,
                           p.descricao
                       };
            return Ok(list);
        }

        // GET: Creditos/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var credito = await _context.Credito
                .SingleOrDefaultAsync(m => m.id == id);
            if (credito == null)
            {
                return NotFound();
            }

            return View(credito);
        }

        // GET: Creditos/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Creditos/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("id,descricao")] Credito credito)
        {
            if (ModelState.IsValid)
            {
                _context.Add(credito);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(credito);
        }

        // GET: Creditos/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var credito = await _context.Credito.SingleOrDefaultAsync(m => m.id == id);
            if (credito == null)
            {
                return NotFound();
            }
            return View(credito);
        }

        // POST: Creditos/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("id,descricao")] Credito credito)
        {
            if (id != credito.id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(credito);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CreditoExists(credito.id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(credito);
        }

        // GET: Creditos/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var credito = await _context.Credito
                .SingleOrDefaultAsync(m => m.id == id);
            if (credito == null)
            {
                return NotFound();
            }

            return View(credito);
        }

        // POST: Creditos/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var credito = await _context.Credito.SingleOrDefaultAsync(m => m.id == id);
            _context.Credito.Remove(credito);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool CreditoExists(int id)
        {
            return _context.Credito.Any(e => e.id == id);
        }
    }
}
